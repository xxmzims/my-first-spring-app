==========Контроллеры=============
Для чего нужен контроллер?

1. Обмениваться данными с моделью
2. Обрабатывает запросы от пользователя(HTTP-запросы)
3. Показывает пользователю правильное представление
4. Переадресация пользователя на другие страницы

Аннотация @Controller

Наследуется от @Component, а значит Spring воспринимает ее как зависимость и работает с ней точно также

Внутри классов, помеченных аннотацией @Controller может быть неограниченное кол-во методов
Обычно, но не всегда каждый метод берет на себя один URL
Обычно, но не всегда, каждый метод возвращает строку название представление, которое надо показать пользователю
У методов может быть любое значение

=======Маппинги=====
 Связывают метод контроллера с адресом, по которому можно обратиться к этому методу (из браузера например)

 Различают 5 видом маппинга - в зависимости от того, какой HTTP запрос(с каким HTTP методом) должен прийти
  в этот метод контроллера

  @GetMapping("/hello-world") - говорит, что мы хотим обрабатывать GET-запросы от пользователя по указанному URl
  @RequestMapping("/people") на уровне класса, означает, что мы хотим, чтобы все методы класса работали с одним
   указанным url

========Параметры get-запроса===========

Параметры передаются в URl запроса

Параметры представляют собой пары ключ=значение, передаются после символа ?, разделяются знаком &(аспирант).
Пример http://localhost:8080/first/hello?name=maks&surname=ugr

 С помощью аннотации @RequestParam можно обрабатывать переданные в url параметры
 Если параметры не указаны будет вызваны ошибка, чтобы ошибки не было и наши параметры были null,
  следует использовать параметр у аннотации required со значением false
  Пример @RequestParam(value = "name", required = false)

Также для получения параметров можно использовать класс HttpServletRequest и его метод getParam().
В этом случае если в url не указаны параметры, они будут null

========CRUD=========
Стандартная классификация функций по манипуляции данными
1. CREATE
2. READ
3. UPDATE
4. DELETE

==========REST==========
1. REST - это паттерн проектирования web-приложений
2. REST описывает то, как посредством протокола HTTP, должен взаимодействовать клиент с сервером
3. Всё взаимодействие с сервером сводится к 4 операциям - получение данных, добавление новых данных,
                                                изменение существующих даных, удаление данных
4. Для каждой из 4 операций используется свой HTTP метод - GET, POST, PATCH, DELETE
(Это не все правила и ограничения REST приложений)

==========DAO(Data Access Object)============
Паттерн проектирования, когда отдельный класс занимается взаимодействием с БД для конкретной сущности.

В DAO-классах обычно пишут SQL-код работы с БД приложений

=======Базы данных======
 Связь Java приложения с БД
 JDBC API - самый низкоуровневый(сами делаем запросы к БД и сами переводим Java-объекты в
                                                    строки и таблицы и наооборот)
JdbcTemplate - тонкая обертква вокруг JDBC API. Часть Spring Framework.
                                    Предоставляет некоторые абсракции, берет часть дел на себя.
Hibernate - самый высокий уровень абстракции. Практиечески не пишем вручную запросы к БД.
Автоматически переводит Java-объекты в строки таблицы и наооборот.
Может автоматически создавать таблицы в БД на основании наших Java-классов.
Этот функционал называется ORM(англ. Object-Relational Mapping).